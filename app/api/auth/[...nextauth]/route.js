import NextAuth from "next-auth";
import GitHubProvider from "next-auth/providers/github";
import GoogleProvider from "next-auth/providers/google";
import { connectToDB } from "@utils/db";
import User from "@models/user";

function vietnameseToEnglish(text) {
  var dictionary = {
    √°: "a",
    √†: "a",
    ·∫£: "a",
    √£: "a",
    ·∫°: "a",
    ƒÉ: "a",
    ·∫Ø: "a",
    ·∫±: "a",
    ·∫≥: "a",
    ·∫µ: "a",
    ·∫∑: "a",
    √¢: "a",
    ·∫•: "a",
    ·∫ß: "a",
    ·∫©: "a",
    ·∫´: "a",
    ·∫≠: "a",
    ƒë: "d",
    √©: "e",
    √®: "e",
    ·∫ª: "e",
    ·∫Ω: "e",
    ·∫π: "e",
    √™: "e",
    ·∫ø: "e",
    ·ªÅ: "e",
    ·ªÉ: "e",
    ·ªÖ: "e",
    ·ªá: "e",
    √≠: "i",
    √¨: "i",
    ·ªâ: "i",
    ƒ©: "i",
    ·ªã: "i",
    √≥: "o",
    √≤: "o",
    ·ªè: "o",
    √µ: "o",
    ·ªç: "o",
    √¥: "o",
    ·ªë: "o",
    ·ªì: "o",
    ·ªï: "o",
    ·ªó: "o",
    ·ªô: "o",
    ∆°: "o",
    ·ªõ: "o",
    ·ªù: "o",
    ·ªü: "o",
    ·ª°: "o",
    ·ª£: "o",
    √∫: "u",
    √π: "u",
    ·ªß: "u",
    ≈©: "u",
    ·ª•: "u",
    ∆∞: "u",
    ·ª©: "u",
    ·ª´: "u",
    ·ª≠: "u",
    ·ªØ: "u",
    ·ª±: "u",
    √Ω: "y",
    ·ª≥: "y",
    ·ª∑: "y",
    ·ªπ: "y",
    ·ªµ: "y",
  };

  var result = "";
  for (var i = 0; i < text.length; i++) {
    var char = text[i];
    if (dictionary[char]) {
      result += dictionary[char];
    } else {
      result += char;
    }
  }

  return result;
}

console.log({
  clientId: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
});
const handler = NextAuth({
  providers: [
    GitHubProvider({
      clientId: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
  callbacks: {
    async session({ session }) {
      const sessionUser = await User.findOne({ email: session.user.email });

      session.user.id = sessionUser._id.toString();

      return session;
    },
    async signIn({ profile }) {
      try {
        // serverless -> lambda -> dynamodb
        console.log("connecting to db");
        await connectToDB();

        //check if user is authenticated
        const isUserExist = await User.findOne({ email: profile.email });
        // if user is not authenticated, create a new user
        if (!isUserExist) {
          console.log(
            "üöÄ ~ file: route.js:46 ~ sighIn ~ error:",
            profile.name?.replaceAll(" ", "").toLowerCase()
          );

          await User.create({
            email: profile.email,
            username: vietnameseToEnglish(
              profile.name?.replaceAll(" ", "").toLowerCase()
            ),
            image: profile.picture,
          });
        }
        return true;
      } catch (error) {
        console.log("üöÄ ~ file: route.js:46 ~ sighIn ~ error:", error);
      }
    },
  },
});

export { handler as GET, handler as POST };
